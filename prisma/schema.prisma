generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  OWNER
  ATTENDANT
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model User {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username  String    @unique
  fullName  String    @map("full_name")
  role      UserRole  @default(ATTENDANT)
  email     String    @unique
  lastLogin DateTime? @map("last_login") @db.Timestamptz
  status    UserStatus @default(ACTIVE)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamptz

  // Relations
  modifiedInventory Inventory[] @relation("ModifiedBy")
  sales            Sale[]      @relation("AttendantSales")
  expenses         Expense[]   @relation("AddedBy")

  @@map("users")
}

model Inventory {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  category     String
  description  String?
  buyingPrice  Decimal  @map("buying_price") @db.Decimal(10, 2)
  sellingPrice Decimal  @map("selling_price") @db.Decimal(10, 2)
  quantity     Int      @default(0)
  imageUrl     String?  @map("image_url")
  modifiedBy   String?  @map("modified_by") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz

  // Relations
  modifier     User?    @relation("ModifiedBy", fields: [modifiedBy], references: [id], onDelete: SetNull)
  sales        Sale[]

  @@index([category])
  @@index([modifiedBy])
  @@map("inventory")
}

model Sale {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId       String   @map("item_id") @db.Uuid
  quantity     Int
  sellingPrice Decimal  @map("selling_price") @db.Decimal(10, 2)
  profit       Decimal  @db.Decimal(10, 2)
  saleDate     DateTime @default(now()) @map("sale_date") @db.Timestamptz
  attendantId  String   @map("attendant_id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  item         Inventory @relation(fields: [itemId], references: [id], onDelete: Restrict)
  attendant    User     @relation("AttendantSales", fields: [attendantId], references: [id], onDelete: Restrict)

  @@index([itemId])
  @@index([attendantId])
  @@index([saleDate])
  @@map("sales")
}

model Expense {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String
  amount      Decimal  @db.Decimal(10, 2)
  date        DateTime @default(now()) @db.Timestamptz
  category    String
  addedBy     String   @map("added_by") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user        User     @relation("AddedBy", fields: [addedBy], references: [id], onDelete: Restrict)

  @@index([category])
  @@index([date])
  @@index([addedBy])
  @@map("expenses")
}